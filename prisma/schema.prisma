generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email                 String         @unique @db.VarChar(50)
  user_id               Int            @id @default(autoincrement())
  first_name            String         @db.VarChar(50)
  last_name             String         @db.VarChar(50)
  saml_role             String         @db.VarChar(50)
  app_roles             String         @db.VarChar(50)
  department            String         @db.VarChar(50)
  is_active             Boolean        @default(true)
  created_at            DateTime       @default(now()) @db.DateTime(0)
  announcement_created  Announcement[] @relation("AnnouncementCreator")
  announcement_modified Announcement[] @relation("AnnouncementModifier")
  event_created         Event[]        @relation("EventCreator")
  event_modified        Event[]        @relation("EventModifier")
  location_created      Location[]     @relation("LocationCreator")
  location_modified     Location[]     @relation("LocationModifier")
  series_created        Series[]       @relation("SeriesCreator")
  series_modified       Series[]       @relation("SeriesModifier")
}

model Location {
  location_id          Int      @id @default(autoincrement())
  room_location        String   @unique @db.VarChar(50)
  created_at           DateTime @default(now()) @db.DateTime(0)
  creator              User?    @relation("LocationCreator", fields: [created_by], references: [email], onDelete: NoAction)
  created_by           String?  @db.VarChar(50)
  last_modified        DateTime @updatedAt @db.DateTime(0)
  modifier             User?    @relation("LocationModifier", fields: [modified_by], references: [email], onDelete: NoAction)
  modified_by          String?  @db.VarChar(50)
  event_location_id    Event[]  @relation("EventLocationId")
  events_with_location Event[]  @relation("EventLocation")
}

model Event {
  event_id            Int            @id @default(autoincrement())
  location_id         Location?      @relation("EventLocationId", fields: [event_location_id], references: [location_id], onDelete: NoAction)
  event_location_id   Int?
  location            Location?      @relation("EventLocation", fields: [event_location], references: [room_location], onDelete: NoAction)
  event_location      String?        @db.VarChar(50)
  start_time          DateTime       @db.DateTime(0)
  end_time            DateTime       @db.DateTime(0)
  summary             String         @db.VarChar(200)
  description         String?        @db.VarChar(200)
  facilitator         String?        @db.VarChar(200)
  status              status         @default(TENTATIVE)
  created_at          DateTime       @default(now()) @db.DateTime(0)
  creator             User?          @relation("EventCreator", fields: [created_by], references: [email], onDelete: NoAction)
  created_by          String?        @db.VarChar(50)
  last_modified       DateTime       @updatedAt @db.DateTime(0)
  modifier            User?          @relation("EventModifier", fields: [modified_by], references: [email], onDelete: NoAction)
  modified_by         String?        @db.VarChar(50)
  series              Series?        @relation("SeriesEvents", fields: [series_id], references: [series_id], onDelete: NoAction)
  series_id           Int?
  event_announcements Announcement[] @relation("EventAnnouncements")
}

model Series {
  series_id                  Int       @id @default(autoincrement())
  series_title               String    @db.VarChar(50)
  description                String?   @db.VarChar(200)
  facilitator                String?   @db.VarChar(200)
  start_time                 DateTime  @db.Time()
  end_time                   DateTime  @db.Time()
  start_date                 DateTime  @db.Date()
  end_date                   DateTime  @db.Date()
  status                     status?   @default(TENTATIVE)
  recurrence_frequency_weeks Int
  created_at                 DateTime  @default(now()) @db.DateTime(0)
  creator                    User?     @relation("SeriesCreator", fields: [created_by], references: [email], onDelete: NoAction)
  created_by                 String?   @db.VarChar(50)
  last_modified              DateTime? @updatedAt @db.DateTime(0)
  modifier                   User?     @relation("SeriesModifier", fields: [modified_by], references: [email], onDelete: NoAction)
  modified_by                String?   @db.VarChar(50)
  events                     Event[]   @relation("SeriesEvents")
}

model Announcement {
  announcement_id Int      @id @default(autoincrement())
  title           String   @db.VarChar(50)
  description     String   @db.VarChar(200)
  created_at      DateTime @default(now()) @db.DateTime(0)
  creator         User?    @relation("AnnouncementCreator", fields: [created_by], references: [email], onDelete: NoAction)
  created_by      String?  @db.VarChar(50)
  last_modified   DateTime @updatedAt @db.DateTime(0)
  modifier        User?    @relation("AnnouncementModifier", fields: [modified_by], references: [email], onDelete: NoAction)
  modified_by     String?  @db.VarChar(50)
  event           Event?   @relation("EventAnnouncements", fields: [event_id], references: [event_id], onDelete: NoAction)
  event_id        Int?
}

enum status {
  CANCELLED
  CONFIRMED
  TENTATIVE
}
