const express = require("express");
const { body, validationResult } = require("express-validator");
const router = express.Router();
const { createSeries, autoGenerateEvents } = require("../models/series");
const createLogger = require("../logger"); // Ensure the path is correct
const logger = createLogger(module);

// Define validation rules for creating event. Optional fields are not included based on prisma model.
const seriesValidation = [
  body("start_time").custom((value) => {
    if (!/^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/.test(value)) {
      throw new Error("start_time must be in HH:MM or HH:MM:SS format");
    }
    return true;
  }),
  body("end_time").custom((value) => {
    if (!/^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/.test(value)) {
      throw new Error("end_time must be in HH:MM or HH:MM:SS format");
    }
    return true;
  }),

  body("start_date")
    .isISO8601()
    .withMessage("start_date must be a valid date in YYYY-MM-DD format"),
  body("end_date")
    .isISO8601()
    .withMessage("end_date must be a valid date in YYYY-MM-DD format"),

  body("recurrence_frequency_weeks")
    .isInt()
    .withMessage("recurrence_frequency_weeks must be an integer"),

  body("recurrence_frequency_days")
    .isArray()
    .withMessage("recurrence_frequency_days must be an array"),
  body("recurrence_frequency_days.*")
    .isInt()
    .withMessage("Each item in recurrence_frequency_days must be an integer"),
];

/**
 * POST /api/series
 * Endpoint to create a new event.
 */
router.post("/series", seriesValidation, async (req, res) => {
  try {
    // express validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const autoGeneratedEvents = await autoGenerateEvents(req.body);
    req.body.events = autoGeneratedEvents.map((eventId) => ({
      event_id: eventId,
    }));

    const newSeries = await createSeries(req.body);
    return res.status(201).send(newSeries);
  } catch (error) {
    logger.error({ message: "POST /api/series", error: error.stack });
    return res.status(500).send({ error: error.message });
  }
});

module.exports = router;
